@using System.Security.Claims
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using YouNGU.Models.ViewModels
@model YouNGU.Models.ViewModels.VideoDetailViewModel

@{
    ViewData["Title"] = Model.Video?.Title ?? "Xem Video"; // Null check title
    // Đường dẫn ảnh mặc định
    var defaultAvatar = Url.Content("~/images/default-avatar.png");
    var defaultThumbnail = Url.Content("~/images/default-thumbnail.jpg");
    // Lấy User ID hiện tại (nếu có)
    var currentUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
}

@section Styles {
    <link href="https://unpkg.com/cloudinary-video-player@1.9.0/dist/cld-video-player.min.css" rel="stylesheet">
    <style>
        /* YouTube-inspired styles */
        body {
            background-color: #f9f9f9;
            color: #0f0f0f;
            font-family: 'Roboto', sans-serif;
        }

        .video-container {
            background-color: #fff;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
            margin-bottom: 16px;
        }

        .video-player-wrapper {
            position: relative;
            width: 100%;
            background-color: #000;
            /* Giữ lại border-radius nếu cần */
            border-radius: 12px;
            overflow: hidden; /* Quan trọng */
            margin-bottom: 16px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .video-player {
            display: block; /* Hoặc flex để căn giữa nếu cần */
            width: 100%;
            height: auto; /* Cho phép chiều cao tự điều chỉnh */
            aspect-ratio: var(--video-aspect-ratio, 16 / 9); /* Tỷ lệ mặc định, sẽ ghi đè bằng JS */
            margin: auto; /* Căn giữa nếu video không chiếm hết chiều rộng */
        }
            .video-player video,
            .video-player #cloudinaryPlayer {
                position: relative;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                overflow:hidden 
                ;max-height: 85vh
            }

        .video-title {
            font-size: 1.4rem;
            font-weight: 500;
            margin: 12px 0;
            line-height: 1.4;
        }

        .channel-info {
            background-color: transparent !important;
            border-bottom: 1px solid #e5e5e5;
            border-top: 1px solid #e5e5e5;
            padding: 16px 0 !important;
        }

        .channel-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            object-fit: cover;
        }

        .subscribe-btn {
            background-color: #cc0000;
            color: white;
            border: none;
            border-radius: 2px;
            padding: 10px 16px;
            font-size: 14px;
            font-weight: 500;
            text-transform: uppercase;
        }

            .subscribe-btn.subscribed {
                background-color: #f2f2f2;
                color: #606060;
            }

        .action-btn {
            background-color: #f2f2f2;
            border: none;
            border-radius: 18px;
            color: #606060;
            padding: 8px 16px;
            margin-right: 8px;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
        }

            .action-btn i {
                margin-right: 6px;
            }

            .action-btn.active {
                background-color: #e6f3ff;
                color: #065fd4;
            }

        .video-stats {
            color: #606060;
            font-size: 14px;
        }

        .video-description {
            background-color: #f2f2f2;
            border-radius: 12px;
            padding: 12px 16px;
            margin: 16px 0;
        }

        .comment-section {
            margin-top: 24px;
        }

        .comment-input {
            border: none;
            border-bottom: 1px solid #e5e5e5;
            border-radius: 0;
            padding: 8px 0;
        }

        .comment-container {
            margin-bottom: 24px;
        }

        .comment {
            margin-bottom: 16px;
        }

        .comment-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }

        .comment-author {
            font-size: 13px;
            font-weight: 500;
        }

        .comment-date {
            font-size: 12px;
            color: #606060;
        }

        .comment-content {
            font-size: 14px;
            margin-top: 4px;
        }

        .recommended-video {
            transition: all 0.2s;
            border: none !important;
            margin-bottom: 12px;
        }

            .recommended-video:hover {
                background-color: #f2f2f2;
            }

        .thumbnail-container {
            position: relative;
            overflow: hidden;
            border-radius: 8px;
        }

        .thumbnail {
            width: 100%;
            height: 94px;
            object-fit: cover;
        }

        .video-duration {
            position: absolute;
            bottom: 4px;
            right: 4px;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 1px 4px;
            border-radius: 2px;
            font-size: 12px;
        }

        .recommended-title {
            font-size: 14px;
            font-weight: 500;
            line-height: 1.3;
            max-height: 40px;
            overflow: hidden;
            margin-bottom: 4px;
        }

        .channel-name, .video-metadata {
            font-size: 12px;
            color: #606060;
            line-height: 1.2;
        }
        /* Hỗ trợ video lấp đầy khi fullscreen */
        .video-player:fullscreen,
        .video-player:-webkit-full-screen,
        .video-player:-moz-full-screen,
        .video-player:-ms-fullscreen {
            width: 100vw !important;
            height: 100vh !important;
            max-width: 100vw !important;
            max-height: 100vh !important;
            aspect-ratio: unset !important;
            border-radius: 0 !important;
            background: #000 !important;
        }

        .cld-video-player:fullscreen,
        .cld-video-player:-webkit-full-screen,
        .cld-video-player:-moz-full-screen,
        .cld-video-player:-ms-fullscreen {
            width: 100vw !important;
            height: 100vh !important;
            max-width: 100vw !important;
            max-height: 100vh !important;
            aspect-ratio: unset !important;
            border-radius: 0 !important;
            background: #000 !important;
        }

    </style>
}

<div class="container-fluid py-3">
    @Html.AntiForgeryToken() <div class="row">
        <div class="col-lg-8">

            <div class="video-player-wrapper">
                @if (!string.IsNullOrEmpty(Model.Video?.CloudinaryPublicId)) // Ưu tiên PublicId
                {
                    <video id="cloudinaryPlayer"
                           class="video-player cld-video-player cld-fluid" @* Bỏ class cld-fluid nếu gây xung đột aspect-ratio *@
                           controls
                           data-cld-public-id="@Model.Video.CloudinaryPublicId">
                    </video>
                }
                else if (!string.IsNullOrEmpty(Model.Video?.VideoPath))
                {
                    <video id="localPlayer" class="video-player" controls>
                        <source src="@Url.Content($"~/uploads/videos/{Model.Video.VideoPath}")" type="video/mp4">
                        Trình duyệt của bạn không hỗ trợ thẻ video.
                    </video>
                }
                else
                {
                    <div class="alert alert-warning m-3">
                        Video không khả dụng.
                    </div>
                }
            </div>

            <div class="video-container p-3">
                @* Thêm padding ở đây thay vì trong các div con *@
                <h1 class="video-title">@Model.Video?.Title</h1>
                <div class="d-flex flex-wrap justify-content-between align-items-center mb-3">
                    @* Thêm flex-wrap *@
                    <div class="video-stats me-3 mb-2 mb-md-0">
                        @* Thêm margin và responsive margin *@
                        <span>@(Model.Video?.ViewCount ?? 0) lượt xem • @FormatHelpers.TimeAgo(Model.Video?.CreatedAt ?? DateTime.UtcNow)</span>
                    </div>
                    <div class="video-actions">
                        @if (User.Identity.IsAuthenticated)
                        {
                            <button type="button" id="likeButton"
                                    class="action-btn @(Model.UserLiked ? "active" : "")"
                                    data-video-id="@Model.Video?.Id"
                                    data-liked="@Model.UserLiked.ToString().ToLower()">
                                <i class="bi bi-hand-thumbs-up"></i>
                                <span id="likeCount">@(Model.Video?.Likes?.Count(l => l.IsLike) ?? 0)</span>
                            </button>
                        }
                        else
                        {
                            <a asp-area="Identity" asp-page="/Account/Login" asp-route-returnUrl="@Context.Request.Path" class="action-btn">
                                <i class="bi bi-hand-thumbs-up"></i> @(Model.Video?.Likes?.Count(l => l.IsLike) ?? 0)
                            </a>
                        }
                        <button class="action-btn" id="shareButton">
                            <i class="bi bi-share"></i> Chia sẻ
                        </button>
                        <button class="action-btn" id="saveButton">
                            <i class="bi bi-bookmark"></i> Lưu
                        </button>
                    </div>
                </div>

                <div class="channel-info d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center">
                        <img src="@(Model.Video?.User?.AvatarPath != null ? Url.Content($"~/uploads/avatars/{Model.Video.User.AvatarPath}") : defaultAvatar)"
                             alt="@(Model.Video?.User?.UserName ?? "User")" class="channel-avatar me-3" loading="lazy">
                        <div>
                            <h5 class="mb-0">
                                <a asp-controller="Channel" asp-action="Index" asp-route-id="@Model.Video?.UserId" class="text-decoration-none text-dark">
                                    @(Model.Video?.User?.FullName ?? Model.Video?.User?.UserName ?? "Người dùng ẩn")
                                </a>
                            </h5>
                            <small class="text-muted" id="subscriberCountText">@Model.SubscriberCount người đăng ký</small>
                        </div>
                    </div>
                    @if (User.Identity.IsAuthenticated && currentUserId != Model.Video?.UserId)
                    {
                        <button class="subscribe-btn @(Model.IsSubscribed ? "subscribed" : "")"
                                id="subscribeButton"
                                data-publisher-id="@Model.Video?.UserId">
                            @(Model.IsSubscribed ? "ĐÃ ĐĂNG KÝ" : "ĐĂNG KÝ")
                        </button>
                    }
                </div>
            </div>

            @if (!string.IsNullOrWhiteSpace(Model.Video?.Description))
            {
                <div class="video-description">
                    <p class="mb-0">@Model.Video.Description</p>
                </div>
            }


            <div class="comment-section">
                <h5 class="mb-4"><span id="commentCount">@(Model.Video?.Comments?.Count() ?? 0)</span> bình luận</h5>

                <div class="comment-container">
                    @if (User.Identity.IsAuthenticated)
                    {
                        <form id="addCommentForm" asp-action="AddComment" asp-controller="Video" method="post" class="mb-4" data-video-id="@Model.Video?.Id">
                            <div class="input-group">
                                <input type="text" name="content" class="form-control comment-input" placeholder="Thêm bình luận..." required>
                                <button type="submit" class="btn btn-primary">Gửi</button>
                            </div>
                            <div id="addCommentError" class="text-danger mt-1 small"></div>
                        </form>
                    }
                    else
                    {
                        <div class="alert alert-info mb-4">
                            <a asp-area="Identity" asp-page="/Account/Login" asp-route-returnUrl="@Context.Request.Path" class="fw-bold text-decoration-none">Đăng nhập</a> để bình luận.
                        </div>
                    }

                    <div id="commentsListContainer">
                        @if (Model.Video?.Comments != null)
                        {
                            @foreach (var comment in Model.Video.Comments.OrderByDescending(c => c.CreatedAt))
                            {
                                <div class="comment">
                                    <div class="d-flex">
                                        <img src="@(comment.User?.AvatarPath != null ? Url.Content($"~/uploads/avatars/{comment.User.AvatarPath}") : defaultAvatar)"
                                             alt="@(comment.User?.UserName ?? "User")" class="comment-avatar me-3" loading="lazy">
                                        <div>
                                            <div class="d-flex align-items-center mb-1">
                                                <span class="comment-author me-2">@(comment.User?.FullName ?? comment.User?.UserName ?? "Người dùng ẩn")</span>
                                                <span class="comment-date">@FormatHelpers.TimeAgo(comment.CreatedAt)</span>
                                            </div>
                                            <p class="comment-content mb-1">@comment.Content</p>
                                            @* <div class="comment-actions">
                                                <button class="btn btn-sm text-muted p-0 me-3">
                                                    <i class="bi bi-hand-thumbs-up"></i> Thích
                                                </button>
                                                <button class="btn btn-sm text-muted p-0">
                                                    <i class="bi bi-hand-thumbs-down"></i> Không thích
                                                </button>
                                            </div> *@
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p>Chưa có bình luận nào.</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <h5 class="mb-3">Video đề xuất</h5>
            @if (Model.RecommendedVideos != null)
            {
                @foreach (var video in Model.RecommendedVideos)
                {
                    <div class="card recommended-video">
                        <div class="row g-0">
                            <div class="col-5">
                                <a asp-controller="Video" asp-action="Watch" asp-route-id="@video.Id" class="thumbnail-container d-block">
                                    @* Ưu tiên ThumbnailUrl (Cloudinary), rồi ThumbnailPath, cuối cùng là ảnh mặc định *@
                                    @{
                                        var thumbSrc = !string.IsNullOrEmpty(video.ThumbnailUrl) ? video.ThumbnailUrl
                                        : !string.IsNullOrEmpty(video.ThumbnailPath) ? Url.Content($"~/uploads/thumbnails/{video.ThumbnailPath}")
                                        : defaultThumbnail;
                                    }
                                    <img src="@thumbSrc" class="thumbnail" alt="@(video.Title ?? "")" loading="lazy">
                                    <span class="video-duration">@FormatHelpers.FormatDuration(video.Duration)</span>
                                </a>
                            </div>
                            <div class="col-7">
                                <div class="card-body p-0 ps-2">
                                    <h6 class="recommended-title">
                                        <a asp-controller="Video" asp-action="Watch" asp-route-id="@video.Id" class="text-decoration-none text-dark">
                                            @(video.Title ?? "Không có tiêu đề")
                                        </a>
                                    </h6>
                                    <p class="channel-name mb-1">
                                        @(video.User?.UserName ?? "Người dùng ẩn")
                                    </p>
                                    <p class="video-metadata mb-0">
                                        @(video.ViewCount) lượt xem • @FormatHelpers.TimeAgo(video.CreatedAt)
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
            const defaultAvatar = '@(defaultAvatar.Replace("'", "\\'"))';

        // === Lấy AntiForgeryToken bằng JavaScript ===
        const antiForgeryTokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
        const antiForgeryToken = antiForgeryTokenInput ? antiForgeryTokenInput.value : null;

        if (!antiForgeryToken) {
            console.warn("Anti-forgery token input not found in the DOM. Ensure is rendered within a form or the main body.");
            // Bạn có thể muốn vô hiệu hóa các nút yêu cầu token hoặc hiển thị lỗi ở đây
            // Ví dụ: alert('Lỗi bảo mật: Không thể thực hiện thao tác.');
        }
        // Hàm helper để thực hiện fetch và xử lý lỗi cơ bản
        async function fetchApi(url, options) {
            try {
                const response = await fetch(url, options);
                if (!response.ok) {
                    // Cố gắng đọc lỗi JSON từ server nếu có
                    let errorData;
                    try {
                        errorData = await response.json();
                    } catch (e) { /* Không phải lỗi JSON */ }

                    console.error('API Error:', response.status, response.statusText, errorData);
                    throw new Error(errorData?.message || `Lỗi ${response.status}: ${response.statusText}`);
                }
                // Kiểm tra content-type trước khi parse JSON
                const contentType = response.headers.get("content-type");
                if (contentType && contentType.indexOf("application/json") !== -1) {
                     return await response.json();
                } else {
                     // Trả về text nếu không phải JSON (ví dụ: action trả về string hoặc không có body)
                     return await response.text();
                 }

            } catch (error) {
                console.error('Fetch Error:', error);
                throw error; // Ném lỗi ra để nơi gọi xử lý
            }
        }

        // Hàm định dạng thời gian (tương tự C# helper) - Nếu bạn muốn dùng JS
        function formatTimeAgo(dateString) {
            const date = new Date(dateString);
            const now = new Date();
            const secondsPast = (now.getTime() - date.getTime()) / 1000;

            if(secondsPast < 60){ return parseInt(secondsPast) + ' giây trước'; }
            if(secondsPast < 3600){ return parseInt(secondsPast/60) + ' phút trước'; }
            if(secondsPast <= 86400){ return parseInt(secondsPast/3600) + ' giờ trước'; }
            const days = secondsPast / 86400;
            if(days < 7){ return Math.floor(days) + ' ngày trước'; }
            if(days < 30){ return Math.floor(days/7) + ' tuần trước'; }
            if(days < 365){ return Math.floor(days/30) + ' tháng trước'; }
            return Math.floor(days/365) + ' năm trước';
        }

         // Hàm escape HTML để tránh XSS khi hiển thị comment
        function escapeHtml(unsafe) {
            if (!unsafe) return "";
            return unsafe
                 .replace(/&/g, "&amp;")
                 .replace(/</g, "&lt;")
                 .replace(/>/g, "&gt;")
                 .replace(/"/g, "&quot;")
                 .replace(/'/g, "&#039;");
         }
    </script>

    @if (!string.IsNullOrEmpty(Model.Video?.CloudinaryPublicId))
    {
        <script src="https://unpkg.com/cloudinary-core@latest/cloudinary-core-shrinkwrap.min.js" type="text/javascript"></script>
        <script src="https://unpkg.com/cloudinary-video-player@1.9.0/dist/cld-video-player.min.js" type="text/javascript"></script>

        <script>
            try {
                 var cld = cloudinary.Cloudinary.new({
                     cloud_name: '@ViewData["CloudinaryCloudName"]', // Lấy từ ViewData hoặc Model
                     secure: true
                 });

                 var cloudinaryPlayerElement = document.getElementById('cloudinaryPlayer');
                 var player = cld.videoPlayer(cloudinaryPlayerElement, {
                     controls: true,
                     autoplay: false,
                     fluid: true, // Thử đặt là false nếu aspect-ratio CSS ko hoạt động
                     playbackRates: [0.5, 1, 1.5, 2],
                     sourceTypes: ['hls', 'dash', 'mp4'],
                     transformation: { }, // Bỏ streaming_profile nếu upload ko dùng profile cụ thể
                     colors: { accent: '#cc0000', base: '#000000' },
                     fontFace: 'Roboto, Arial, sans-serif',
                     plugins: {
                     //           qualitySelector: {
                     //               default: 'auto'
                     //           }
                     }
                 });

                 var viewCountIncremented = false;
                 player.on('play', function() {
                    // Điều chỉnh logic tăng view count
                     if (!viewCountIncremented) {
                        console.log("Cloudinary video played - incrementing view count");
                        fetchApi('@Url.Action("IncrementViewCount", "Video", new { id = Model.Video.Id })', {
                                method: 'POST',
                                headers: { 'RequestVerificationToken': antiForgeryToken } // Chỉ cần token
                            })
                           .then(data => console.log("View count increment response:", data))
                           .catch(error => console.error("Failed to increment view count:", error));
                         viewCountIncremented = true; // Chỉ tăng 1 lần mỗi lần tải trang
                     }
                 });

                  player.on('error', function(event) {
                    console.error('Lỗi Cloudinary Player:', event?.error || event);
                    alert('Đã xảy ra lỗi khi tải video. Vui lòng thử lại sau.');
                 });

                 // --- Điều chỉnh Aspect Ratio cho Cloudinary Player ---
                 player.on('loadedmetadata', function() {
                     const videoElement = player.el().querySelector('video'); // Lấy thẻ video bên trong
                     if (videoElement && videoElement.videoWidth > 0 && videoElement.videoHeight > 0) {
                         const aspectRatio = videoElement.videoWidth / videoElement.videoHeight;
                         // Áp dụng cho container của player
                         cloudinaryPlayerElement.style.setProperty('--video-aspect-ratio', aspectRatio);
                         console.log('Cloudinary aspect ratio set to:', aspectRatio);
                     } else {
                           console.warn('Could not get video dimensions from Cloudinary player on loadedmetadata.');
                     }
                 });

            } catch (error) {
                 console.error("Error initializing Cloudinary player:", error);
                 alert("Không thể khởi tạo trình phát video Cloudinary.");
            }
        </script>
    }
    else
    {
        <script>
            // Xử lý video cục bộ
             var localPlayer = document.getElementById('localPlayer');
             if (localPlayer) {
                 var viewCountIncremented = false;
                 localPlayer.addEventListener('play', function() {
                     if (!viewCountIncremented) {
                          console.log("Local video played - incrementing view count");
                          fetchApi('@Url.Action("IncrementViewCount", "Video", new { id = Model.Video?.Id })', { // Thêm ?.Id
                                method: 'POST',
                                headers: { 'RequestVerificationToken': antiForgeryToken }
                            })
                           .then(data => console.log("View count increment response:", data))
                           .catch(error => console.error("Failed to increment view count:", error));
                         viewCountIncremented = true;
                     }
                 });

                  // --- Điều chỉnh Aspect Ratio cho Local Player ---
                 localPlayer.addEventListener('loadedmetadata', function() {
                    if (localPlayer.videoWidth > 0 && localPlayer.videoHeight > 0) {
                        const aspectRatio = localPlayer.videoWidth / localPlayer.videoHeight;
                        localPlayer.style.setProperty('--video-aspect-ratio', aspectRatio);
                         console.log('Local video aspect ratio set to:', aspectRatio);
                    } else {
                         console.warn('Could not get video dimensions from local player on loadedmetadata.');
                     }
                 });

                 localPlayer.addEventListener('error', function(e) {
                     console.error('Lỗi Local Player:', e);
                     alert('Đã xảy ra lỗi khi tải video cục bộ.');
                 });
             }
        </script>
    }

    <script>
        // --- Xử lý các nút và form khác bằng AJAX ---

        // Nút chia sẻ (Giữ nguyên)
        const shareButton = document.getElementById('shareButton');
        if (shareButton) {
            shareButton.addEventListener('click', function() {
                if (navigator.share) {
                    navigator.share({
                        title: '@(Model.Video?.Title ?? "")', // Null check
                        url: window.location.href
                    }).catch(err => console.error("Share failed:", err));
                } else {
                    prompt('Sao chép liên kết này để chia sẻ:', window.location.href);
                }
            });
        }


        // Nút lưu (Giữ nguyên, cần modal)
         const saveButton = document.getElementById('saveButton');
         if(saveButton) {
            saveButton.addEventListener('click', function() {
                // Cần có modal #playlistModal và thư viện jQuery/Bootstrap JS
                if (typeof $ !== 'undefined' && $('#playlistModal').modal) {
                     $('#playlistModal').modal('show');
                 } else {
                     alert('Chức năng lưu playlist chưa sẵn sàng.');
                     console.error("jQuery or Bootstrap modal not available for #playlistModal");
                 }
            });
         }

        // ---- AJAX cho Nút Like ----
        const likeButton = document.getElementById('likeButton');
        const likeCountSpan = document.getElementById('likeCount');

        if (likeButton && likeCountSpan) {
            likeButton.addEventListener('click', async function() {
                const videoId = this.getAttribute('data-video-id');
                if (!videoId) return;

                this.classList.add('processing'); // Thêm class loading
                this.disabled = true;

                try {
                    const data = await fetchApi('@Url.Action("ToggleLike", "Video")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': antiForgeryToken
                        },
                         // Gửi videoId trong body
                         body: JSON.stringify({ videoId: parseInt(videoId) }) // Đảm bảo là số nếu cần
                    });

                    if (data.success) {
                         // Cập nhật giao diện nút
                         this.classList.toggle('active', data.isLiked);
                         this.setAttribute('data-liked', data.isLiked.toString());
                         // Cập nhật số lượt thích
                         likeCountSpan.textContent = data.likeCount;
                    } else {
                         // Có thể hiển thị lỗi cụ thể hơn nếu server trả về message
                         alert(data.message || 'Không thể thay đổi trạng thái Like.');
                     }

                } catch (error) {
                    console.error("Like Error:", error);
                     alert(`Lỗi khi thực hiện Like: ${error.message}`);
                } finally {
                     this.classList.remove('processing'); // Bỏ class loading
                     this.disabled = false;
                }
            });
        }

        // ---- AJAX cho Nút Đăng ký ----
        const subscribeButton = document.getElementById('subscribeButton');
         const subscriberCountSpan = document.getElementById('subscriberCountText'); // ID cho text subscriber

        if (subscribeButton && subscriberCountSpan) {
            subscribeButton.addEventListener('click', async function() {
                const publisherId = this.getAttribute('data-publisher-id');
                 if (!publisherId) return;

                this.classList.add('processing');
                this.disabled = true;

                try {
                     const data = await fetchApi('@Url.Action("ToggleSubscription", "Channel")', { // Đảm bảo Action đúng
                         method: 'POST',
                         headers: {
                             'Content-Type': 'application/json',
                             'RequestVerificationToken': antiForgeryToken
                         },
                         body: JSON.stringify({ publisherId: publisherId }) // Gửi publisherId
                     });

                    if (data.success) {
                        this.classList.toggle('subscribed', data.isSubscribed);
                        this.textContent = data.isSubscribed ? 'ĐÃ ĐĂNG KÝ' : 'ĐĂNG KÝ';
                         // Cập nhật số người đăng ký (nếu server trả về)
                         if (typeof data.subscriberCount !== 'undefined') {
                              subscriberCountSpan.textContent = `${data.subscriberCount} người đăng ký`;
                         }
                    } else {
                         alert(data.message || 'Không thể thay đổi trạng thái đăng ký.');
                     }

                } catch (error) {
                     console.error("Subscribe Error:", error);
                     alert(`Lỗi khi đăng ký kênh: ${error.message}`);
                } finally {
                     this.classList.remove('processing');
                     this.disabled = false;
                }
            });
        }

        // ---- AJAX cho Form Thêm Bình luận ----
        const addCommentForm = document.getElementById('addCommentForm');
        const commentInput = addCommentForm?.querySelector('input[name="content"]'); // Lấy input
        const commentsListContainer = document.getElementById('commentsListContainer');
        const commentCountSpan = document.getElementById('commentCount'); // Span chứa số lượng comment
        const addCommentErrorDiv = document.getElementById('addCommentError'); // Div báo lỗi

        if (addCommentForm && commentInput && commentsListContainer && commentCountSpan) {
            addCommentForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const videoId = this.getAttribute('data-video-id');
                const content = commentInput.value.trim();
                const submitButton = this.querySelector('button[type="submit"]');

                if (!videoId || !content) {
                    addCommentErrorDiv.textContent = 'Vui lòng nhập nội dung bình luận.';
                    return;
                }
                addCommentErrorDiv.textContent = ''; // Xóa lỗi cũ
                submitButton.disabled = true;
                submitButton.classList.add('processing');
                submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Gửi...';


                try {
                    const data = await fetchApi(this.action, { // Lấy action từ form
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': antiForgeryToken
                        },
                        body: JSON.stringify({ videoId: parseInt(videoId), content: content })
                    });

                    if (data.success && data.comment) {
                        // Tạo HTML cho comment mới
                        const newComment = data.comment;
                         const commentHtml = `
                            <div class="comment">
                                <div class="d-flex">
                                     <img src="${newComment.avatarPath ? escapeHtml(newComment.avatarPath) : escapeHtml(defaultAvatar)}"
                                         alt="${escapeHtml(newComment.userName || 'User')}" class="comment-avatar me-3" loading="lazy">
                                    <div>
                                        <div class="d-flex align-items-center mb-1">
                                             <span class="comment-author me-2">${escapeHtml(newComment.userFullName || newComment.userName || 'Người dùng ẩn')}</span>
                                             <span class="comment-date">${escapeHtml(newComment.formattedCreatedAt ? formatTimeAgo(newComment.formattedCreatedAt) : '')}</span>
                                        </div>
                                        <p class="comment-content mb-1">${escapeHtml(newComment.content)}</p>
                                    </div>
                                </div>
                            </div>`;

                         // Thêm comment mới vào đầu danh sách
                         commentsListContainer.insertAdjacentHTML('afterbegin', commentHtml);
                         commentInput.value = ''; // Xóa input
                         // Cập nhật số lượng comment
                         const currentCount = parseInt(commentCountSpan.textContent || '0');
                         commentCountSpan.textContent = currentCount + 1;

                          // Nếu có thông báo "Chưa có bình luận nào" thì xóa đi
                          const noCommentMsg = commentsListContainer.querySelector('p');
                          if (noCommentMsg && noCommentMsg.textContent.includes("Chưa có bình luận nào")) {
                              noCommentMsg.remove();
                          }

                    } else {
                         // Hiển thị lỗi gần form comment
                         addCommentErrorDiv.textContent = data.message || 'Không thể gửi bình luận.';
                     }

                } catch (error) {
                     console.error("Comment Error:", error);
                     addCommentErrorDiv.textContent = `Lỗi khi gửi bình luận: ${error.message}`;
                } finally {
                     submitButton.disabled = false;
                     submitButton.classList.remove('processing');
                     submitButton.textContent = 'Gửi';
                }
            });
        }

    </script>
}